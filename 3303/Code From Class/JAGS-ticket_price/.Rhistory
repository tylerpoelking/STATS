pnorm(p = 1.5, mean=1, sd = 2 )
pnorm( 1.5, mean=1, sd = 2 )
pnorm( q= 1.5, mean=1, sd = 2 )
pnorm( q= 1, mean=1, sd = 2 )
pnorm(q= 1, mean=2, sd = 2 )
(.5*.5)/(.5*.5 + .3085*.5)
#INCREASE sd
#calculate P(y=1| param =1)
a = pnorm(q= 1, mean=1, sd = 5 )
#calculate P(y=1| param =2)
b = pnorm(q= 1, mean=2, sd = 5 )
result = (a*.5)/(a*.5 + b*.5)
result
#Decrease sd
#calculate P(y=1| param =1)
a = pnorm(q= 1, mean=1, sd = .1 )
#calculate P(y=1| param =2)
b = pnorm(q= 1, mean=2, sd = .1 )
result = (a*.5)/(a*.5 + b*.5)
result
#INCREASE sd
#calculate P(y=1| param =1)
a = pnorm(q= 1, mean=1, sd = 5 )
#calculate P(y=1| param =2)
b = pnorm(q= 1, mean=2, sd = 5 )
result = (a*.5)/(a*.5 + b*.5)
print("When sd is 5 (larger): ")
result
#Decrease sd
#calculate P(y=1| param =1)
a = pnorm(q= 1, mean=1, sd = .1 )
#calculate P(y=1| param =2)
b = pnorm(q= 1, mean=2, sd = .1 )
result = (a*.5)/(a*.5 + b*.5)
print("When sd is .1 (smaller): ")
result
#calculate P(y=1| param =1)
pnorm(q= 1, mean=1, sd = 2 )
#calculate P(y=1| param =2)
pnorm(q= 1, mean=2, sd = 2 )
print("When sd is 2: ")
result = (.5*.5)/(.5*.5 + .3085*.5)
result
# ----------------------------------------------------------
# File:  score.R
# Description: calculates/approximates the probability distribution of
#              scores on a cognative exam for individuals with Alzheimer's
#              disease both marginally and conditional on genotype
# Author:  Kate Calder (calder@stat.osu.edu)
# Course:  STAT 3303
# ----------------------------------------------------------
library(ggplot2)
# ----------
# Specification of the the marginal distribution of genotype
# and the conditional distribution of score given genotype
# ----------
# marginal genotype probabilities
prob <- c( .2, .3, .5 )
# conditional means and standard deviations
mu <- c( -3, -1.5, -.5 )
sigma <- c( .8, .7, .5 )
# plot conditional density functions
score.seq <- seq( -6, 2, length = 100 )
score.seq
component.dat <- data.frame( score = rep( score.seq, times = 3) )
component.dat$genotype <- rep( c( "G-A", "G-B", "G-C" ), each = 100 )
component.dat$density <- c(dnorm( score.seq, mu[1], sigma[1] ),
dnorm( score.seq, mu[2], sigma[2] ),
dnorm( score.seq, mu[3], sigma[3] ))
ggplot(component.dat, aes( x = score, y = density, color = genotype )) +
geom_line()
# ----------
# draw samples from the joint distribution
# of genotypes and scores
# ----------
# number of samples
n.samples <-1000
# simulate genotypes
genotype <- sample( c( "G-A", "G-B", "G-C" ), n.samples, replace = T, prob = prob )
# simulate scores conditional on genotype
score.sim <- data.frame(score = rnorm(n.samples, mu[as.numeric(as.factor(genotype))],
sigma[as.numeric(as.factor(genotype))]))
# plot histogram of the samples
p <- ggplot( score.sim, aes( x = score)) +
geom_histogram( aes(y = ..density.. ), fill = "blue", alpha = 0.2)
p
# function that calculates the marginal density of scores
marginal.density <- function(x)
{
prob[1] * dnorm( x, mu[1], sigma[1] ) +
prob[2] * dnorm( x, mu[2], sigma[2] ) +
prob[3] * dnorm( x, mu[3], sigma[3] )
}
# add marginal density to the histogram
p + stat_function( fun = marginal.density, lwd = 1)
# ----------
# Different probabilities of
# scoring greater than 0
# ----------
# probabilities of scoring 0 or greater conditional on genotype
round( sapply( 1:3, function(i) 1 - pnorm( 0, mu[i], sigma[i] ) ), 3)
# marginal probability of scoring 0 or greater
round( mean( score.sim > 0 ), 3)
?dnorm
knitr::opts_chunk$set(echo = TRUE)
# marginal probabilities
prob <- c( .5, .5 )
# conditional means and standard deviations. Set sigma = 2 for both cases
mu <- c(1, 2)
sigma <- c( 2, 2)
# number of samples
n.samples <-1000
# simulate genotypes
param <- sample( c( "Equals 1", "Equals 2"), n.samples, replace = T, prob = prob )
# simulate scores conditional on param
score.sim <- data.frame(score = rnorm(n.samples, mu[as.numeric(as.factor(param))],
sigma[as.numeric(as.factor(param))]))
# plot histogram of the samples
p <- ggplot(score.sim, aes( x = score)) +
geom_histogram( aes(y = ..density.. ), fill = "blue", alpha = 0.2)
p
# function that calculates the marginal density of scores
marginal.density <- function(x)
{
prob[1] * dnorm( x, mu[1], sigma[1] ) +
prob[2] * dnorm( x, mu[2], sigma[2] )
}
# add marginal density to the histogram
p + stat_function( fun = marginal.density, lwd = 1)
#calculate P(y=1| param =1)
pnorm(q= 1, mean=1, sd = 2)
#calculate P(y=1| param =2)
pnorm(q= 1, mean=2, sd = 2)
print("When sd is 2: ")
result = (.5*.5)/(.5*.5 + .3085*.5)
result
#INCREASE sd
#calculate P(y=1| param =1)
a = pnorm(q= 1, mean=1, sd = 5 )
#calculate P(y=1| param =2)
b = pnorm(q= 1, mean=2, sd = 5 )
result = (a*.5)/(a*.5 + b*.5)
print("When sd is 5 (larger): ")
result
#Decrease sd
#calculate P(y=1| param =1)
a = pnorm(q= 1, mean=1, sd = .1 )
#calculate P(y=1| param =2)
b = pnorm(q= 1, mean=2, sd = .1 )
result = (a*.5)/(a*.5 + b*.5)
print("When sd is .1 (smaller): ")
result
theta_true <- runif(1,0,1)
N = sample(seq(100000,400000),1)
N
A = round(theta_true*N)
A
B = N - A
Zpop <- sample(c(rep(1,A),rep(0,B)))
N_samp <- 500
)
N_samp <- 500
Zsamp <- sample(Zpop,N_samp)
Y_samp <- sum(Zsamp)
Y_samp
### Function: Prior Plot Values
prior <- function(m,n){
a = n * m
b = n * (1 - m)
dom <- seq(0,1,0.005)
val <- dbeta(dom,a,b)
return(data.frame('x'=dom, 'y'=val))
}
priot(.5,50)
prior(.5,50)
prior(.5,1)
# ----------------------------------------------------------
# File:  prior_sensitivity.R
# Description: illustrates the influence of the prior on the
#              posterior using Columbus temperature data
#              see course notes for details
# Author:  Kate Calder (calder@stat.osu.edu)
# Course:  STAT 3303
# ----------------------------------------------------------
# Read in the temperature data
temp.data <- read.table("temperature.txt", header=T)
temp <- temp.data$Temp
N <- length(temp)
# -------------
# Model Set-up
# -------------
# assumed standard deviation of the data
sigma.y <- 2
# prior mean
prior.mean <- 26
# prior standard deviation
prior.sd <- 2
# -------------
# Examine how the posterior distribution
# changes as the number of data points increases
# -------------
par(mfrow = c(1,1), ask=T)
for(n in 1:N)
{
# select the first n measurements
y <- temp[1:n]
# calculate posterior sd
post.sd <- sqrt( 1/(( 1/prior.sd^2) +
(n/sigma.y^2)))
# calculate posterior mean
post.mean <- post.sd^2 * ((prior.mean/prior.sd^2) +
(n*mean(y)/sigma.y^2))
#construct plots
x <- seq(15,50,length=500)
plot(x,dnorm(x, prior.mean, prior.sd), type='l', col="red",
ylim=c(0, dnorm(post.mean, post.mean, post.sd)),
xlim = range(x),
xlab="temperature",
ylab="",
main=paste("n = ",n))
lines(x, dnorm(x, post.mean, post.sd), col="blue")
points(y, rep(0,n), col="green", pch=19)
abline(v= prior.mean, col="red")
abline(v= post.mean, col="blue")
abline(v= mean(y), col="green")
legend(40, dnorm(post.mean,post.mean,post.sd),
c("prior","data","posterior"),
col=c("red","green","blue"), text.col="black",lty=1)
}
# ----------------------------------------------------------
# File:  prior_sensitivity.R
# Description: illustrates the influence of the prior on the
#              posterior using Columbus temperature data
#              see course notes for details
# Author:  Kate Calder (calder@stat.osu.edu)
# Course:  STAT 3303
# ----------------------------------------------------------
# Read in the temperature data
temp.data <- read.table("temperature.txt", header=T)
temp <- temp.data$Temp
N <- length(temp)
# -------------
# Model Set-up
# -------------
# assumed standard deviation of the data
sigma.y <- 2
# prior mean
prior.mean <- 26
# prior standard deviation
prior.sd <- 2
# -------------
# Examine how the posterior distribution
# changes as the number of data points increases
# -------------
par(mfrow = c(1,1), ask=T)
for(n in 1:N)
{
# select the first n measurements
y <- temp[1:n]
# calculate posterior sd
post.sd <- sqrt( 1/(( 1/prior.sd^2) +
(n/sigma.y^2)))
# calculate posterior mean
post.mean <- post.sd^2 * ((prior.mean/prior.sd^2) +
(n*mean(y)/sigma.y^2))
#construct plots
x <- seq(15,50,length=500)
plot(x,dnorm(x, prior.mean, prior.sd), type='l', col="red",
ylim=c(0, dnorm(post.mean, post.mean, post.sd)),
xlim = range(x),
xlab="temperature",
ylab="",
main=paste("n = ",n))
lines(x, dnorm(x, post.mean, post.sd), col="blue")
points(y, rep(0,n), col="green", pch=19)
abline(v= prior.mean, col="red")
abline(v= post.mean, col="blue")
abline(v= mean(y), col="green")
legend(40, dnorm(post.mean,post.mean,post.sd),
c("prior","data","posterior"),
col=c("red","green","blue"), text.col="black",lty=1)
}
knitr::opts_chunk$set(echo = TRUE)
theta = 77/700
sample = rbinom(1, 1000, theta)
sample
theta = 22/700
sample = rbinom(700, 1000, theta)
sample
plot(sample)
hist(sample)
#ratio of deaths to all patients. This is the posterior probability of death within one year
theta2 = 39/674
#draw 1000 samples
sample = rbinom(674, 1000, theta2)
hist(sample)
?rbeta
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death = 22/700
#draw 1000 samples
a = 22+1
b = 700 - 22 + 1
sample = rbeta(1000, a, b)
hist(sample)
mean(sample2)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_Not_BB = 39/674
Post_Prob_death_Not_BB
#draw 1000 samples
a = 39+1
b = 674 - 39 + 1
sample2 = rbeta(1000, a, b)
mean(sample2)
hist(sample2)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_BB = 22/700
Post_Prob_death_BB
#draw 1000 samples
a = 22+1
b = 700 - 22 + 1
sample = rbeta(1000, a, b)
#test mean of sample is close to Post_Prob_death__BB
mean(sample)
hist(sample)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_BB = 22/700
Post_Prob_death_BB
#draw 1000 samples
a = 22+1
b = 700 - 22 + 1
sample = rbeta(1000, a, b)
#test mean of sample is close to Post_Prob_death__BB
mean(sample)
hist(sample)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_Not_BB = 39/674
Post_Prob_death_Not_BB
#draw 1000 samples
a = 39+1
b = 674 - 39 + 1
sample0 = rbeta(1000, a, b)
#test mean of sample2 is close to Post_Prob_death_Not_BB
mean(sample0)
hist(sample0)
b = 700 - 22 + 1
b
b2 = 674 - 39 + 1
b2
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_Not_BB = 39/674
Post_Prob_death_Not_BB
#draw 1000 samples
a0 = 39+1
b0 = 674 - 39 + 1
sample0 = rbeta(1000, a0, b0)
#test mean of sample2 is close to Post_Prob_death_Not_BB
mean(sample0)
hist(sample0)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_BB = 22/700
Post_Prob_death_BB
#draw 1000 samples
a1 = 22+1
b1 = 700 - 22 + 1
sample = rbeta(1000, a1, b1)
#test mean of sample is close to Post_Prob_death__BB
mean(sample)
hist(sample)
pbeta(.5, a3, b3)
diff = sample1 - sample0
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_BB = 22/700
Post_Prob_death_BB
#draw 1000 samples
a1 = 22+1
b1 = 700 - 22 + 1
sample1 = rbeta(1000, a1, b1)
#test mean of sample is close to Post_Prob_death__BB
mean(sample1)
hist(sample1)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_Not_BB = 39/674
Post_Prob_death_Not_BB
#draw 1000 samples
a0 = 39+1
b0 = 674 - 39 + 1
sample0 = rbeta(1000, a0, b0)
#test mean of sample2 is close to Post_Prob_death_Not_BB
mean(sample0)
hist(sample0)
diff = sample1 - sample0
a3 = a1-a0
b3 = b1-b0
est_val = mean(diff)
variance = var(diff)
pbeta(.5, a3, b3)
est_val
diff = sample1 - sample0
m = mean(diff)
s_2 = var(diff)
holder = ((m*(1-m))/s_2) -1
a3 = holder*m
b3 = holder*(1-m)
pbeta(.5, a3, b3)
a3
b3
m
diff = sample1 - sample0
m = mean(diff)
s_2 = var(diff)
holder = ((m*(1-m))/s_2) -1
a3 = holder*m
b3 = holder*(1-m)
pbeta(.5, a3, b3)
pbeta(0, a3, b3)
m
1-m
holder
a3
-226.813 *-0.02675684
sample3 = rbeta(5000, a3, b3)
hist(sample3)
s_2 = var(diff)
s_2
m
p = sum(x<0)/len(diff)
p = sum(x<0)/length(diff)
p
diff = sample1 - sample0
m = mean(diff)
s_2 = var(diff)
p = sum(diff<0)/length(diff)
p
#holder = ((m*(1-m))/s_2) -1
#a3 = holder*m
#b3 = holder*(1-m)
holder = ((m*(1-m))/s_2) -1
a3 = holder*m
b3 = holder*(1-m)
pbeta(0, a2, b3)
pbeta(0, a3, b3)
sample0 = rbeta(1000, a3, b3)
sample3 = rbeta(1000, a3, b3)
a3
sample3 = rbeta(1000, a3, b3*-1)
m
b3
set.seed(42)
diff = sample1 - sample0
#E[θ1−θ0|y1,y0]
m = mean(diff)
#Var[θ1−θ0|y1,y0)]
s_2 = var(diff)
#posterior probability that the one-year death rate of ACD individuals taking beta-blockers is less than the one-year probability of death for individuals not taking beta blockers
p = sum(diff<0)/length(diff)
p
diff = sample1 - sample0
#E[θ1−θ0|y1,y0]
m = mean(diff)
#Var[θ1−θ0|y1,y0)]
s_2 = var(diff)
#posterior probability that the one-year death rate of ACD individuals taking beta-blockers is less than the one-year probability of death for individuals not taking beta blockers
p = sum(diff<0)/length(diff)
p
knitr::opts_chunk$set(echo = TRUE)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_BB = 22/700
Post_Prob_death_BB
#draw 1000 samples
a1 = 22+1
b1 = 700 - 22 + 1
sample1 = rbeta(1000, a1, b1)
#test mean of sample is close to Post_Prob_death__BB
mean(sample1)
hist(sample1)
#ratio of deaths to all patients. This is the posterior probability of death within one year
Post_Prob_death_Not_BB = 39/674
Post_Prob_death_Not_BB
#draw 1000 samples
a0 = 39+1
b0 = 674 - 39 + 1
sample0 = rbeta(1000, a0, b0)
#test mean of sample2 is close to Post_Prob_death_Not_BB
mean(sample0)
hist(sample0)
diff = sample1 - sample0
#E[θ1−θ0|y1,y0]
m = mean(diff)
#Var[θ1−θ0|y1,y0)]
s_2 = var(diff)
#posterior probability that the one-year death rate of ACD individuals taking beta-blockers is less than the one-year probability of death for individuals not taking beta blockers
p = sum(diff<0)/length(diff)
p
library(rjags)
source('~/Downloads/JAGS-ticket_price/ticket_price.R', echo=TRUE)
install.packages('gridExtra')
source('~/Downloads/JAGS-ticket_price/ticket_price.R', echo=TRUE)
setwd("~/Desktop/All Stuff/School Stuff/STATS/3303/Code From Class/JAGS-ticket_price")
source('~/Downloads/JAGS-ticket_price/ticket_price.R', echo=TRUE)
source('~/Downloads/JAGS-ticket_price/ticket_price.R', echo=TRUE)
print(n)
data <- data.frame(Field=c(1,2,3,4,5,6,7), Number.Planted=c(50,42,37,45,45,50,41), Number.Emerged=c(25,23,16,21,28,30,21))
library(rjags)
library(ggplot2)
library(grid)
library(gridExtra)
set.seed(2293423)
data <- data.frame(Field=c(1,2,3,4,5,6,7), Number.Planted=c(50,42,37,45,45,50,41), Number.Emerged=c(25,23,16,21,28,30,21))
y <- data$Number.Emerged
n <- length(y)
print(n)
numPlanted <- data$Number.Planted
