LargestRes = rownames(UN11)[match(c(max(lm2$residuals)),lm2$residuals)]
SecLargestRes = rownames(UN11)[match(c(max(lm2$residuals[lm2$residuals!=max(lm2$residuals)])),lm2$residuals)]
SmallestRes = rownames(UN11)[match(c(min(lm2$residuals)),lm2$residuals)]
SecSmallestRes = rownames(UN11)[match(c(min(lm2$residuals[lm2$residuals!=min(lm2$residuals)])),lm2$residuals)]
##2.20.1
lm3=lm(Interval~Duration, data=oldfaith)
plot(lm3)
#2.20.3
sigma=sqrt(sum(lm3$residuals^2)/lm3$df.residual)
estimate=lm3$coefficients[[1]]+250*lm3$coefficients[[2]]
qnorm(.9, mean=estimate, sd=sigma)
.9*sigma+estimate
interval1
lwr2
upr2
lm3=lm(Interval~Duration, data=oldfaith)
lm3
interval2
qnorm(.9, mean=estimate, sd=sigma)
lm3$coefficients
qnorm(.9, mean=estimate, sd=sigma)
interval2
swimtimes <- read.csv("~/Downloads/swimtimes.csv", stringsAsFactors=FALSE)
View(swimtimes)
str(swimtimes)
unique(swimtimes$full_desc)
table(swimtimes$full_desc)
swimtimes <- read.csv("~/Downloads/swimtimes.csv", stringsAsFactors=FALSE)
View(swimtimes)
str(swimtimes)
unique(swimtimes$full_desc)
table(swimtimes$full_desc)
dim(freestyle)
library(dplyr)
freestyle = filter(swimtimes, grepl("Freestyle", full_desc))
dim(freestyle)
freestyle = filter(freestyle, !grepl("50 F", full_desc))
dim(freestyle)
freestyle = mutate(freestyle, dist = ifelse(grepl("100", full_desc), 100, ifelse(grepl("200", full_desc), 200, ifelse(grepl("400", full_desc), 400, ifelse(grepl("800", full_desc), 800, 1500)))))
freestyle = mutate(freestyle, dist = ifelse(grepl("100", full_desc), 100, ifelse(grepl("200", full_desc), 200, ifelse(grepl("400", full_desc), 400, ifelse(grepl("800", full_desc), 800, 1500)))))
view(freestyle)
table(freestyle)
freestyle$dist
ids = grep(":", freestyle$swim_time, invert=T)
ids
ids = !grep(":", freestyle$swim_time)
ids
ids = grep(":", freestyle$swim_time, invert=T)
?grep
ids = grep(":", freestyle$swim_time, invert=T)
ids = grep(":", freestyle$swim_time, invert=F)
ids
ids = grep(":", freestyle$swim_time, invert=T)
head(freestyle$swim_time[ids])
freestyle$swim_time[ids] = paste("0:",freestyle$swim_time[ids], sep="")
head(freestyle$swim_time)
library(lubridate)
head(ms(freestyle$swim_time))
install.packages("lubridate")
library(lubridate)
head(ms(freestyle$swim_time))
?ms
freestyle = mutate(freestyle, times = period_to_seconds(ms(swim_time)), seconds_per_hundred = times/dist*100)
library(ggplot2)
qplot(data=freestyle, x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters")
qplot(data=filter(freestyle, full_name_computed %in% c("Abert, Marion", "Batchelor, Molly", "Adams, Ashley")), x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters", color=full_name_computed,  xlim=c(100,1500))
filter(freestyle, grepl( "Camilla", full_name_computed))[,c("full_name_computed", "birth_date", "meet_name", "dist")]
qplot(data=filter(freestyle, full_name_computed %in% "Hattersley, Camilla"), x=dist, y=seconds_per_hundred, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters", color=full_name_computed,  xlim=c(100,1500))
qplot(data=freestyle, x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters", alpha = I(1/50))
baseplot = ggplot(data=freestyle, aes(x=dist, y=seconds_per_hundred, group=full_name_computed)) +
geom_point(alpha=1/100) +
geom_line(alpha = 1/100) +
ylab("Seconds per 100 meters") +
xlab("Race distance (m)")
baseplot
ledeckyData = filter(freestyle, full_name_computed %in% "Ledecky, Katie")
ledeckyplot = baseplot +
geom_line(data=ledeckyData, color="red", size=1) +
geom_point(data=ledeckyData, color="red", size=2)
ledeckyplot
qplot(data=freestyle, x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters")
ledeckyplot = baseplot +
geom_line(data=ledeckyData, color="red", size=1) +
geom_point(data=ledeckyData, color="red", size=2)
ledeckyplot
freestyle %>% group_by(dist) %>% summarize(mean(seconds_per_hundred))
summarize(mean(seconds_per_hundred),group_by(dist,freestyle))
summarize(group_by(freestyle, dist), mean(seconds_per_hundred))
avg50data = freestyle %>% group_by(dist) %>% summarize(avg50 = mean(sort(seconds_per_hundred)[1:50]))
avg50data
avg50data = freestyle %>% group_by(dist) %>% summarize(avg50 = mean(seconds_per_hundred[1:50]))
avg50data
freestyle %>% filter(!grepl("Ledecky", full_name_computed)) %>%
group_by(dist) %>% summarize(avg50 = mean(sort(seconds_per_hundred)[1:50]))
freestyle %>% filter(!grepl("Ledecky", full_name_computed)) %>%
group_by(dist) %>% summarize(avg50 = mean(sort(seconds_per_hundred)[1:50]))
twolines = ledeckyplot +
geom_line(data=avg50data, aes(y=avg50, group=NULL), size=1) +
geom_point(data=avg50data, aes(y=avg50, group=NULL), size=2) +
ggtitle("Ledecky is changing the definition of sprint") +
theme(plot.title = element_text(face = "bold", size = 18, hjust=0))
twolines
grids = twolines + scale_y_continuous(breaks=seq(from=52, to=68, by=2), minor_breaks=NULL) + scale_x_continuous(breaks=c(100,200,400,800,1500), minor_breaks=NULL)
grids
annotated = baseplot +
geom_line(data=ledeckyData, aes(color="Ledecky's fastest times"), size=1) +
geom_point(data=ledeckyData, aes(color="Ledecky's fastest times"), size=2) +
geom_line(data=avg50data, aes(y=avg50, group=NULL, color="Average of 50 fastest times"), size=1) +
geom_point(data=avg50data, aes(y=avg50, group=NULL, color="Average of 50 fastest times"), size=2) +
ggtitle("Ledecky is changing the definition of sprint") +
theme(plot.title = element_text(face = "bold", size = 18, hjust=0)) +
scale_y_continuous(breaks=seq(from=52, to=68, by=2), minor_breaks=NULL) +
scale_x_continuous(breaks=c(100,200,400,800,1500), minor_breaks=NULL)
annotated
finalplot = annotated + scale_color_manual("Legend", values = c("black", "red"))
finalplot
plot(0,0,xlim=c(100, 1500), ylim=c(52, 68), xlab="Race distance (m)", ylab="Seconds per 100 meters", axes=FALSE)
title("Ledecky is changing the definition of sprint\nThe 500 fastest women's times at each distance since 2000")
for(sname in unique(freestyle$full_name_computed)) {
with(filter(freestyle, full_name_computed %in% sname), lines(dist, seconds_per_hundred, col=alpha("black", alpha=1/100), type="o"))
}
box()
# 1 in the first argument corresponds to the x-axis
axis(1, at = c(100, 200, 400, 800, 1500))
# 2 in the first argument corresponds to the y-axis
axis(2, at = seq(from=52, to=68, by=2))
with(ledeckyData, lines(dist, seconds_per_hundred, col="red", type="o", pch=16, lwd=2))
with(avg50data, lines(dist, avg50, type="o", pch=16, lwd=2))
legend("bottomright", legend=c("Average of 50 fastest times", "Katie Ledecky's fastest times"), pch=c(16, 16), lty=c(1,1), col=c("black", "red"))
str(swimtimes)
unique(swimtimes$full_desc)
table(swimtimes$full_desc)
library(dplyr)
freestyle = filter(swimtimes, grepl("Freestyle", full_desc))
dim(freestyle)
freestyle = filter(freestyle, !grepl("50 F", full_desc))
dim(freestyle)
freestyle = mutate(freestyle, dist = ifelse(grepl("100", full_desc), 100, ifelse(grepl("200", full_desc), 200, ifelse(grepl("400", full_desc), 400, ifelse(grepl("800", full_desc), 800, 1500)))))
ids = grep(":", freestyle$swim_time, invert=T)
freestyle$swim_time[ids] = paste("0:",freestyle$swim_time[ids], sep="")
head(freestyle$swim_time)
freestyle = mutate(freestyle, times = period_to_seconds(ms(swim_time)), seconds_per_hundred = times/dist*100)
library(ggplot2)
qplot(data=freestyle, x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters")
qplot(data=filter(freestyle, full_name_computed %in% c("Abert, Marion", "Batchelor, Molly", "Adams, Ashley")), x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters", color=full_name_computed,  xlim=c(100,1500))
filter(freestyle, grepl( "Camilla", full_name_computed))[,c("full_name_computed", "birth_date", "meet_name", "dist")]
qplot(data=filter(freestyle, full_name_computed %in% "Hattersley, Camilla"), x=dist, y=seconds_per_hundred, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters", color=full_name_computed,  xlim=c(100,1500))
qplot(data=freestyle, x=dist, y=seconds_per_hundred, group=full_name_computed, geom=c("point", "line"), xlab="Race distance (m)", ylab="Seconds per 100 meters", alpha = I(1/50))
baseplot = ggplot(data=freestyle, aes(x=dist, y=seconds_per_hundred, group=full_name_computed)) +
geom_point(alpha=1/100) +
geom_line(alpha = 1/100) +
ylab("Seconds per 100 meters") +
xlab("Race distance (m)")
baseplot
ledeckyData = filter(freestyle, full_name_computed %in% "Ledecky, Katie")
ledeckyplot = baseplot +
geom_line(data=ledeckyData, color="red", size=1) +
geom_point(data=ledeckyData, color="red", size=2)
ledeckyplot
freestyle %>% group_by(dist) %>% summarize(mean(seconds_per_hundred))
avg50data = freestyle %>% group_by(dist) %>% summarize(avg50 = mean(sort(seconds_per_hundred)[1:50]))
avg50data
freestyle %>% filter(!grepl("Ledecky", full_name_computed)) %>%
group_by(dist) %>% summarize(avg50 = mean(sort(seconds_per_hundred)[1:50]))
twolines = ledeckyplot +
geom_line(data=avg50data, aes(y=avg50, group=NULL), size=1) +
geom_point(data=avg50data, aes(y=avg50, group=NULL), size=2) +
ggtitle("Ledecky is changing the definition of sprint") +
theme(plot.title = element_text(face = "bold", size = 18, hjust=0))
twolines
grids = twolines + scale_y_continuous(breaks=seq(from=52, to=68, by=2), minor_breaks=NULL) + scale_x_continuous(breaks=c(100,200,400,800,1500), minor_breaks=NULL)
grids
annotated = baseplot +
geom_line(data=ledeckyData, aes(color="Ledecky's fastest times"), size=1) +
geom_point(data=ledeckyData, aes(color="Ledecky's fastest times"), size=2) +
geom_line(data=avg50data, aes(y=avg50, group=NULL, color="Average of 50 fastest times"), size=1) +
geom_point(data=avg50data, aes(y=avg50, group=NULL, color="Average of 50 fastest times"), size=2) +
ggtitle("Ledecky is changing the definition of sprint") +
theme(plot.title = element_text(face = "bold", size = 18, hjust=0)) +
scale_y_continuous(breaks=seq(from=52, to=68, by=2), minor_breaks=NULL) +
scale_x_continuous(breaks=c(100,200,400,800,1500), minor_breaks=NULL)
annotated
finalplot = annotated + scale_color_manual("Legend", values = c("black", "red"))
finalplot
plot(0,0,xlim=c(100, 1500), ylim=c(52, 68), xlab="Race distance (m)", ylab="Seconds per 100 meters", axes=FALSE)
# 1 in the first argument corresponds to the x-axis
axis(1, at = c(100, 200, 400, 800, 1500))
# 2 in the first argument corresponds to the y-axis
axis(2, at = seq(from=52, to=68, by=2))
# Add the box around the plot
box()
title("Ledecky is changing the definition of sprint\nThe 500 fastest women's times at each distance since 2000")
for(sname in unique(freestyle$full_name_computed)) {
with(filter(freestyle, full_name_computed %in% sname), lines(dist, seconds_per_hundred, col=alpha("black", alpha=1/100), type="o"))
}
with(ledeckyData, lines(dist, seconds_per_hundred, col="red", type="o", pch=16, lwd=2))
with(avg50data, lines(dist, avg50, type="o", pch=16, lwd=2))
legend("bottomright", legend=c("Average of 50 fastest times", "Katie Ledecky's fastest times"), pch=c(16, 16), lty=c(1,1), col=c("black", "red"))
install.packages("alr4")
library(alr4)
gmod = lm(lifeExpF ~ fertility, data= UN11)
plot(UN11$fertility, UN11$lifeExpF)
abline(gmod)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid)
abline(h=0)
plot(x=gmod.fits, y=gmod.resid, main="Residuals in Life Expectancy vs Fitted Values", ylab="Residuals", xlab="Fitted Values")
abline(h=0)
plot(x=gmod.fits, y=gmod.resid, main="Residuals in LifeExp vs Fitted Values", ylab="Residuals", xlab="Fitted Values")
abline(h=0)
install.packages("alr4")
library(alr4)
gmod = lm(lifeExpF ~ fertility, data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals in LifeExp vs Fitted Values", ylab="Residuals", xlab="Fitted Values")
abline(h=0)
gmod = lm(lifeExpF ~ fertility, data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals in LifeExp vs Fitted Values", ylab="Residuals", xlab="Fitted Values")
abline(h=0)
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values")
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values")
abline(h=0)
gmod2 = lm(lifeExpF ~ fertility, data= UN11, main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
gmod2 = lm(lifeExpF ~ fertility, data= UN11, main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values on log(ppgdp")
abline(h=0)
plot(x=gmod2.fits, y=gmod2.resid,main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
gmod = lm(lifeExpF ~ log(ppgdp), data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values on log(ppgdp")
abline(h=0)
identify(gmod.fits, gmod.resid)
UN11[4,]
UN11[c(4,24,58,125,166,172),]
gmod = lm(lifeExpF ~ log(ppgdp), data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values on log(ppgdp")
abline(h=0)
identify(gmod.fits, gmod.resid)
gmod2 = lm(lifeExpF ~ fertility, data= UN11)
gmod2.resid = gmod2$residuals
gmod2.fits=gmod2$fitted.values
plot(x=gmod2.fits, y=gmod2.resid,main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
abline(h=0)
identify(gmod2.fits, gmod2.resid)
identify(gmod2.fits, gmod2.resid)
gmod2 = lm(lifeExpF ~ fertility, data= UN11)
gmod2.resid = gmod2$residuals
gmod2.fits=gmod2$fitted.values
plot(x=gmod2.fits, y=gmod2.resid,main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
abline(h=0)
identify(gmod2.fits, gmod2.resid)
UN11[c(24,101,166,172,199),]
gmod = lm(lifeExpF ~ log(ppgdp), data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values on log(ppgdp")
abline(h=0)
identify(gmod.fits, gmod.resid)
UN11[c(4,24,58,166,172),]
gmod2 = lm(lifeExpF ~ fertility, data= UN11)
gmod2.resid = gmod2$residuals
gmod2.fits=gmod2$fitted.values
plot(x=gmod2.fits, y=gmod2.resid,main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
abline(h=0)
scatterplotMatrix(~ HT2 + HT9 + WT2 + WT9 + ST9 + BMI18, data=BGSgirls, smooth=FALSE)
cor(BGSgirls)
BGSgirls2 = data.frame(x1=BGSgirls$HT2, x2 = BGSgirls$HT9, x3 = BGSgirls$WT2, x4 = BGSgirls$WT9, x5 = BGSgirls$ST9, x6 = BGSgirls$BMI18)
colnames(BGSgirls2) = c("HT2", "HT9", "WT2", "WT9", "ST9", "BMI18")
cor(BGSgirls2)
plot(BMI18~WT9, data=BGgirls)
plot(BMI18~WT9, data=BGSgirls)
abline(gmodWT)
gmodWT=lm(BMI18~WT9, data=BGSgirls)
abline(gmodWT)
plot(BMI18~WT9, data=BGSgirls, "Marginal of BMI18 vs WT9", ylab="BMI18", xlab="WT9")
abline(gmodWT)
plot(BMI18~WT9, data=BGSgirls, main="Marginal of BMI18 vs WT9", ylab="BMI18", xlab="WT9")
abline(gmodWT)
gmodWT$coefficients[[1]]
gmodWT$coefficients
gmodST=lm(BMI18~ST9, data=BGSgirls)
plot(BMI18~ST9, data=BGSgirls, main="Marginal of BMI18 vs WT9", ylab="BMI18", xlab="ST9")
abline(gmodST)
gmodST$coefficients
gmodSTWT=lm(ST9~WT9, data=BGSgirls)
plot(ST9~WT9, data=BGSgirls, main="Marginal of ST9 vs WT9", ylab="ST9", xlab="WT9")
abline(gmodSTWT)
gmodSTWT$coefficients
gmodBMIWTST=lm(BMI18~WT9+ST9, data=BGSgirls)
e1=resid(lm(BMI18~WT9, data=BGSgirls))
e2=resid(lm(ST9~WT9, data=BGSgirls))
plot(y=e1, x=e2, main="Added Variable Plot for ST9", ylab="BMI18 vs WT9 Residuals", xlab="ST9 vs WT9 Residuals")
gmod6=lm(e1~e2)
abline(gmod5)
e1=resid(lm(BMI18~WT9, data=BGSgirls))
e2=resid(lm(ST9~WT9, data=BGSgirls))
plot(y=e1, x=e2, main="Added Variable Plot for ST9", ylab="BMI18 vs WT9 Residuals", xlab="ST9 vs WT9 Residuals")
gmod6=lm(e1~e2)
abline(gmod6)
pairs(BMI18~WT9, ST9, data=BGSgirls)
pairs(BMI18~WT9,ST9, data=BGSgirls)
pairs(BMI18~WT9+ST9, data=BGSgirls)
scatterplotMatrix(~ BMI18 + HT9 WT9, data=BGSgirls, smooth=FALSE)
scatterplotMatrix(~ BMI18 + HT9 +WT9, data=BGSgirls, smooth=FALSE)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9)
colnames(BGSgirls2) = c("BMI18", "WT9", "HT9")
cor(BGSgirls1)
gmodWT$coefficients
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9, main="Marginal Plots")
colnames(BGSgirls2) = c("BMI18", "WT9", "HT9")
cor(BGSgirls1)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9, main="Marginal Plots")
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9, main="Marginal Plots")
colnames(BGSgirls2) = c("BMI18", "WT9", "ST9")
cor(BGSgirls1)
BGSgirls2 = data.frame(x1=BGSgirls$HT2, x2 = BGSgirls$HT9, x3 = BGSgirls$WT2, x4 = BGSgirls$WT9, x5 = BGSgirls$ST9, x6 = BGSgirls$BMI18)
colnames(BGSgirls2) = c("HT2", "HT9", "WT2", "WT9", "ST9", "BMI18")
cor(BGSgirls2)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9, main="Marginal Plots")
BGSgirls1
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9)
colnames(BGSgirls2) = c("BMI18", "WT9", "ST9")
cor(BGSgirls1)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE,, main="Marginal Plots")
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE, main="Marginal Plots")
e1=resid(lm(BMI18~WT9, data=BGSgirls))
e2=resid(lm(ST9~WT9, data=BGSgirls))
plot(y=e1, x=e2, main="Added Variable Plot for ST9", ylab="BMI18 vs WT9 Residuals", xlab="ST9 vs WT9 Residuals")
gmod6=lm(e1~e2)
abline(gmod6)
summary(gmod6)
scatterplotMatrix(~ HT2 + HT9 + WT2 + WT9 + ST9 + BMI18, data=BGSgirls, smooth=FALSE)
gmod4=lm(BMI18~HT2+HT9+WT2+WT9+ST9, data=BGSgirls)
summary(gmod4)
scatterplotMatrix(~ HT2 + HT9 + WT2 + WT9 + ST9 + BMI18, data=BGSgirls, smooth=FALSE)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE, main="Marginal Plots")
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9)
colnames(BGSgirls2) = c("BMI18", "WT9", "ST9")
cor(BGSgirls2)
scatterplotMatrix(~ HT2 + HT9 + WT2 + WT9 + ST9 + BMI18, data=BGSgirls, smooth=FALSE)
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9)
colnames(BGSgirls1) = c("HT2", "HT9", "WT2", "WT9","ST9","BMI18")
cor(BGSgirls1)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE, main="Marginal Plots")
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9)
colnames(BGSgirls1) = c("BMI18", "WT9", "ST9")
cor(BGSgirls1)
BGSgirls2 = data.frame(x1=BGSgirls$HT2, x2 = BGSgirls$HT9, x3 = BGSgirls$WT2, x4 = BGSgirls$WT9, x5 = BGSgirls$ST9, x6 = BGSgirls$BMI18)
colnames(BGSgirls2) = c("HT2", "HT9", "WT2", "WT9", "ST9", "BMI18")
cor(BGSgirls2)
scatterplotMatrix(~ BMI18 + WT9 +ST9, data=BGSgirls, smooth=FALSE, main="Marginal Plots")
BGSgirls1 = data.frame(x1=BGSgirls$BMI18, x2 = BGSgirls$WT9, x3 = BGSgirls$ST9)
colnames(BGSgirls1) = c("BMI18", "WT9", "ST9")
cor(BGSgirls1)
gmod4=lm(BMI18~HT2+HT9+WT2+WT9+ST9, data=BGSgirls)
summary(gmod4)
BGSgirls2 = data.frame(x1=BGSgirls$HT2, x2 = BGSgirls$HT9, x3 = BGSgirls$WT2, x4 = BGSgirls$WT9, x5 = BGSgirls$ST9, x6 = BGSgirls$BMI18)
colnames(BGSgirls2) = c("HT2", "HT9", "WT2", "WT9", "ST9", "BMI18")
cor(BGSgirls2)
summary(gmod4)$sigma
gmod5=lm(BMI18~WT9+ST9, data=BGSgirls)
cor(gmod5)
cor(BGSgirls1)
gmod5=lm(BMI18~WT9+ST9, data=BGSgirls)
varEst=with(summary(gmod5),sigma^2*cov.unscaled)
varEst
seEst=sqrt(varEst)
cor(BGSgirls1)
varEst=with(summary(gmod5),sigma^2*cov.unscaled)
seEst=sqrt(varEst)
seEst
sqrt(diag(vcov(gmod5)))
varEst=with(summary(gmod5),sigma^2*cov.unscaled)
varEst
cor(BGSgirls1)
varEst=with(summary(gmod5),sigma^2*cov.unscaled)
varEst=with(summary(gmod5),sigma^2*cov.unscaled)
varEst
seEst=sqrt(diag(vcov(gmod5)))
seEst
predict(gmod5,newdata=data.frame(WT9=35, ST9=50), se.fit = TRUE, interval="predict")
#Question 1
#3.1
install.packages("alr4")
library(alr4)
gmod = lm(lifeExpF ~ log(ppgdp), data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values on log(ppgdp")
abline(h=0)
identify(gmod.fits, gmod.resid)
gmod2 = lm(lifeExpF ~ fertility, data= UN11)
gmod2.resid = gmod2$residuals
gmod2.fits=gmod2$fitted.values
plot(x=gmod2.fits, y=gmod2.resid,main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
abline(h=0)
gmod = lm(lifeExpF ~ log(ppgdp), data= UN11)
gmod.resid = gmod$residuals
gmod.fits=gmod$fitted.values
plot(x=gmod.fits, y=gmod.resid, main="Residuals Plot for LifeExp vs log(ppgdp)", ylab="Residuals", xlab="Fitted Values on log(ppgdp")
abline(h=0)
identify(gmod.fits, gmod.resid)
gmod2 = lm(lifeExpF ~ fertility, data= UN11)
gmod2.resid = gmod2$residuals
gmod2.fits=gmod2$fitted.values
plot(x=gmod2.fits, y=gmod2.resid,main="Residuals Plot for LifeExpF vs Fertility", ylab="Residuals", xlab="Fitted Values on Fertility")
abline(h=0)
BGSgirls
gmod4=lm(BMI18~HT2+WT2+HT9+WT9+ST9, data=BGSgirls)
summary(gmod4)
gmod4=lm(BMI18~HT2+WT2+HT9+WT9+ST9, data=BGSgirls)
#Stats
summary(gmod4)
#Correlation
BGSgirls2 = data.frame(x1=BGSgirls$HT2, x2 = BGSgirls$HT9, x3 = BGSgirls$WT2, x4 = BGSgirls$WT9, x5 = BGSgirls$ST9, x6 = BGSgirls$BMI18)
colnames(BGSgirls2) = c("HT2", "WT2", "HT9", "WT9", "ST9", "BMI18")
cor(BGSgirls2)
BGSgirls2 = data.frame(x1=BGSgirls$HT2, x2 = BGSgirls$HT9, x3 = BGSgirls$WT2, x4 = BGSgirls$WT9, x5 = BGSgirls$ST9, x6 = BGSgirls$BMI18)
colnames(BGSgirls2) = c("HT2", "WT2", "HT9", "WT9", "ST9", "BMI18")
cor(BGSgirls2)
summary(gmod4)
summary(gmod4)$sigma
summary(gmod4)$r.squared
package(alr4)
package(altr4)
oldfaith
SecSmallestRes = rownames(UN11)[match(c(min(lm2$residuals[lm2$residuals!=min(lm2$residuals)])),lm2$residuals)]
lm1 = lm(wt~ht, data = nbahtwt,subset=(pos=='F'))
predict(lm1,newdata=data.frame(ht=c(79)),se.fit=TRUE,interval="confidence")
predict(lm1,newdata=data.frame(ht=c(79)),se.fit=TRUE,interval="predict")
##Least Square Estimates B1 and B0:
nbahtwtF = subset(nbahtwt, pos %in% 'F')
names(nbahtwtF) = c("name","pos","ht","wt", "age")
#total sum of squares
htMean = mean(nbahtwtF$ht)
wtMean = mean(nbahtwtF$wt)
SYY=sum((nbahtwtF$wt-wtMean)^2)
#Residual sum of squares
RSS=sum(lm1$residuals^2)
#Regression sum of squares
SSreg=SYY-RSS
#Residual Plot
plot(x=fitted(lm1),y=lm1$residuals, ylab="Residuals",main="Residual Plot for NBA Forwards Model")
abline(h=0)
#Standardized Residuals Plot
plot(x=fitted(lm1),y=rstandard(lm1), ylab="Standardized Residuals", main="Standardized Resid. Plot for NBA Guards Model")
abline(h=0)
#2.16.4 Coefficient of determination
lm2 = lm(log(fertility)~log(ppgdp), data=UN11)
rSquar=summary(lm2)$r.squared
#2.16.5
yStar=2.6655073-0.2071498*log(1000)
interval1=predict(lm2,newdata=data.frame(ppgdp=c(1000)),se.fit = TRUE, interval = "predict")
lwr2=exp(interval1$fit[2])
upr2=exp(interval1$fit[3])
#2.16.6
LargestFert=UN11[UN11$fertility==max(UN11$fertility),]
SmallestFert=UN11[UN11$fertility==min(UN11$fertility),]
LargestRes = rownames(UN11)[match(c(max(lm2$residuals)),lm2$residuals)]
SecLargestRes = rownames(UN11)[match(c(max(lm2$residuals[lm2$residuals!=max(lm2$residuals)])),lm2$residuals)]
SmallestRes = rownames(UN11)[match(c(min(lm2$residuals)),lm2$residuals)]
SecSmallestRes = rownames(UN11)[match(c(min(lm2$residuals[lm2$residuals!=min(lm2$residuals)])),lm2$residuals)]
##2.20.1
lm3=lm(Interval~Duration, data=oldfaith)
#2.20.2
interval2=predict(lm3,newdata=data.frame(Duration=c(250)),se.fit = TRUE, interval = "confidence")
#2.20.3
sigma=sqrt(sum(lm3$residuals^2)/lm3$df.residual)
estimate=lm3$coefficients[[1]]+250*lm3$coefficients[[2]]
qnorm(.9, mean=estimate, sd=sigma)
.9*sigma+estimate
oldfaith
UN11
UN11
UN11
UN11
install.packages("alr4")
library(alr4)
install.packages("alr4")
install.packages("alr4")
library(alr4)
oldfaith
lm(Duration~Interval )
lm(formula = Interval ~ Duration, data = OldFaith)
lm(formula = Interval ~ Duration, data = oldfaith)
ya=lm(formula = Interval ~ Duration, data = oldfaith)
summary(ya)
mean(oldfaith$Interval)
lm3=lm(formula = Interval ~ Duration, data = oldfaith)
interval2=predict(lm3,newdata=data.frame(Duration=c(250)),se.fit = TRUE, interval = "confidence")
interval1
interval2
interval2=predict(lm3,newdata=data.frame(Duration=c(240)),se.fit = TRUE, interval = "confidence")
SXX=sum((oldfaith$Duration-mean(oldfaith$Duration)^2)
SXX=sum((oldfaith$Duration-mean(oldfaith$Duration))^2)
oldfaith$Duratio
mean(oldfaith$Duration)
SXX=sum((oldfaith$Duration-mean(oldfaith$Duration))^2)
SXX
